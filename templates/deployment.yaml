---

kind: Deployment
apiVersion: apps/v1
metadata:
  name: {{ data.get('name') or get_site_name() }}
  namespace: {{ namespace }}
  labels:
    app: "{{ data.get('app_name') or domain }}"
    {%- for key, value in labels.items() %}
    {{key}}: "{{value}}"
    {%- endfor %}
spec:
  replicas: {{ data.replicas }}

  {% if data.replicas > 1 %}
  {# This is to avoid issues with the podAntiAffinity rule in clusters with the
  same amount of nodes as the replicas requested. This strategy will remove a
  pod before creating the new one. However, we shouldn't use it when the number
  of replicas is just one because it will cause downtime #}
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
    type: RollingUpdate
  {% endif %}

  selector:
    matchLabels:
      app: {{ data.get('app_name') or domain }}
  template:
    metadata:
      labels:
        app: {{ data.get('app_name') or domain }}
    spec:
      affinity:
        {# This rule is to avoid having pods in the same node #}
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - {{ data.get('app_name') or domain }}
            topologyKey: "kubernetes.io/hostname"
      containers:
        - name: {{ data.get('name') or get_site_name() }}
          image: {{ data.image }}:{{ tag | default("latest", true) }}

          ports:
            - name: http
              containerPort: {{ data.containerPort | default(80) }}

          env:
            - name: TALISKER_NETWORKS
              value: 10.0.0.0/8

            - name: SECRET_KEY
              valueFrom:
                secretKeyRef:
                  key: {{ data.get('secretKey') or get_site_name() }}
                  name: secret-keys

            {%- if data.useProxy is not defined or data.useProxy != False %}
            {% macro proxy_settings() %}{% include 'proxy-settings.yaml' %}{% endmacro %}
            {{ proxy_settings() | indent(12) }}
            {%- endif %}

            {%- if "env" in data %}
            {%- for env in data.env %}
            - name: {{ env.name }}
              {%- if "value" in env %}
              value: "{{ env.value }}"
              {%- endif %}

              {%- if "secretKeyRef" in env %}
              valueFrom:
                secretKeyRef:
                  key: {{ env.secretKeyRef.key }}
                  name: {{ env.secretKeyRef.name }}
              {%- endif %}

              {%- if "configMapKeyRef" in env %}
              valueFrom:
                configMapKeyRef:
                  key: {{ env.configMapKeyRef.key }}
                  name: {{ env.configMapKeyRef.name }}
              {%- endif %}
            {%- endfor %}
            {%- endif %}

          {%- if data.readinessPath is not defined or data.readinessPath != false %}
          readinessProbe:
            httpGet:
              path: {{ data.readinessPath | default("/_status/check") }}
              port: 80
            periodSeconds: 5
            timeoutSeconds: 3
          {%- endif %}

          resources:
            limits:
              memory: {{ data.memoryLimit | default("256Mi") }}
            requests:
              memory: {{ data.memoryRequest | default("128Mi") }}
